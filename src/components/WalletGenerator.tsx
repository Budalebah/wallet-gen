import React, { useState } from 'react';
import { generateWallet, deriveForNetwork, WalletData } from '../utils/walletGenerator';
import { Buffer } from 'buffer';

const WalletGenerator: React.FC = () => {
  const [wallet, setWallet] = useState<WalletData | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [status, setStatus] = useState('Ready to generate your secure wallet...');
  const [networkType, setNetworkType] = useState(0);
  const [derivationIndex, setDerivationIndex] = useState(0);
  const [derivedAddress, setDerivedAddress] = useState<string>('');
  const [derivedPath, setDerivedPath] = useState<string>('');

  const handleGenerateWallet = async () => {
    setIsGenerating(true);
    setStatus('Initializing secure wallet generation...');
    setWallet(null);

    try {
      const newWallet = await generateWallet((progress) => {
        setStatus(progress);
      });
      setWallet(newWallet);
      setStatus('‚úÖ Wallet generated successfully!');
    } catch (error) {
      setStatus(`‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error occurred'}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleDerivePath = () => {
    if (!wallet) {
      alert('Please generate a wallet first');
      return;
    }

    try {
      const seed = Buffer.from(wallet.seed_hex, 'hex');
      const derived = deriveForNetwork(seed, networkType, 0, 0, 0, derivationIndex);
      
      const pathString = derived.path
        .map(i => (i & 0x7fffffff).toString() + (i & 0x80000000 ? "'" : ""))
        .join("/");
      
      setDerivedAddress(derived.address);
      setDerivedPath(pathString);
    } catch (error) {
      alert(`Derivation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  };

  const handleSaveWallet = () => {
    if (!wallet) return;

    const timestamp = Math.floor(Date.now() / 1000);
    const filename = `octra_wallet_${wallet.address.slice(-8)}_${timestamp}.txt`;

    const content = `OCTRA WALLET - CONFIDENTIAL
${"=".repeat(60)}

‚ö†Ô∏è  SECURITY WARNING: KEEP THIS FILE SECURE AND PRIVATE
Generated: ${new Date().toISOString().replace("T", " ").slice(0, 19)}
Address Format: oct + Base58(SHA256(pubkey))

WALLET INFORMATION:
${"=".repeat(60)}
Mnemonic Phrase: ${wallet.mnemonic.join(" ")}
Private Key (Base64): ${wallet.private_key_b64}
Public Key (Base64): ${wallet.public_key_b64}
Wallet Address: ${wallet.address}

TECHNICAL DETAILS:
${"=".repeat(60)}
Entropy: ${wallet.entropy_hex}
Signature Algorithm: Ed25519
Key Derivation: BIP39-compatible (PBKDF2-HMAC-SHA512, 2048 iterations)
Master Chain Code: ${wallet.master_chain_hex}

SIGNATURE TEST:
${"=".repeat(60)}
Test Message: ${wallet.test_message}
Signature: ${wallet.test_signature}
Verification: ${wallet.signature_valid ? 'VALID ‚úÖ' : 'INVALID ‚ùå'}

${"=".repeat(60)}
Generated by Octra Wallet Generator
Never share your private key or mnemonic phrase!
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const networkTypes = [
    { value: 0, label: 'MainCoin Network' },
    { value: 1, label: 'SubCoin Network' },
    { value: 2, label: 'Contract Network' },
    { value: 3, label: 'Subnet Network' },
    { value: 4, label: 'Account Network' }
  ];

  return (
    <div className="App">
      {/* Header */}
      <header className="header">
        <div className="header-content">
          <div className="logo">
            <div className="logo-icon">O</div>
            <div className="logo-text">Octra Wallet</div>
          </div>
          <nav>
            <ul className="nav-links">
              <li><a href="#" className="nav-link">Generator</a></li>
              <li><a href="#" className="nav-link">Security</a></li>
              <li><a href="#" className="nav-link">Documentation</a></li>
            </ul>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="main-content">
        {/* Hero Section */}
        <section className="hero-section">
          <h1 className="hero-title">Professional Wallet Generator</h1>
          <p className="hero-subtitle">
            Generate secure, enterprise-grade cryptocurrency wallets with advanced cryptographic features 
            and professional-level security standards.
          </p>
          <div className="hero-features">
            <div className="feature-badge">
              <span>üîê</span>
              <span>BIP39 Compatible</span>
            </div>
            <div className="feature-badge">
              <span>‚ö°</span>
              <span>Ed25519 Cryptography</span>
            </div>
            <div className="feature-badge">
              <span>üõ°Ô∏è</span>
              <span>HD Wallet Support</span>
            </div>
            <div className="feature-badge">
              <span>üîí</span>
              <span>Client-Side Security</span>
            </div>
          </div>
        </section>

        {/* Generator Card */}
        <div className="card">
          <div className="card-header">
            <h2 className="card-title">Wallet Generation</h2>
            <p className="card-description">
              Generate a new secure wallet with cryptographically strong randomness and industry-standard algorithms.
            </p>
          </div>
          <div className="card-content">
            {/* Status Section */}
            <div className="status-section">
              <label className="field-label">Generation Status</label>
              <div className="status-container">{status}</div>
            </div>

            {/* Generate Button */}
            <button 
              className="btn btn-primary btn-large btn-full"
              onClick={handleGenerateWallet}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <span>üîÑ</span>
                  <span>Generating Secure Wallet...</span>
                </>
              ) : (
                <>
                  <span>üöÄ</span>
                  <span>Generate New Wallet</span>
                </>
              )}
            </button>
          </div>
        </div>

        {/* Wallet Information */}
        {wallet && (
          <div className={`wallet-info ${wallet ? 'visible' : ''}`}>
            <div className="card">
              <div className="card-header">
                <h2 className="card-title">Your Secure Wallet</h2>
                <p className="card-description">
                  Your wallet has been generated successfully. Please save this information securely.
                </p>
              </div>
              <div className="card-content">
                {/* Security Warning */}
                <div className="security-warning">
                  <div className="warning-icon">‚ö†Ô∏è</div>
                  <div className="warning-content">
                    <h4>Critical Security Notice</h4>
                    <p>
                      Never share your private key or mnemonic phrase with anyone. Store this information 
                      in a secure location offline. Loss of this information means permanent loss of access to your wallet.
                    </p>
                  </div>
                </div>

                {/* Wallet Fields Grid */}
                <div className="grid grid-cols-1">
                  {/* Mnemonic */}
                  <div className="field-group">
                    <label className="field-label">üîë Recovery Phrase (12 Words)</label>
                    <div className="field-value highlight">{wallet.mnemonic.join(' ')}</div>
                  </div>

                  {/* Address */}
                  <div className="field-group">
                    <label className="field-label">üìç Wallet Address</label>
                    <div className="field-value address">{wallet.address}</div>
                  </div>

                  {/* Private Key */}
                  <div className="field-group">
                    <label className="field-label">üîê Private Key</label>
                    <div className="field-value">
                      <div className="mb-2"><strong>Hex:</strong> {wallet.private_key_hex}</div>
                      <div><strong>Base64:</strong> {wallet.private_key_b64}</div>
                    </div>
                  </div>

                  {/* Public Key */}
                  <div className="field-group">
                    <label className="field-label">üîì Public Key</label>
                    <div className="field-value">
                      <div className="mb-2"><strong>Hex:</strong> {wallet.public_key_hex}</div>
                      <div><strong>Base64:</strong> {wallet.public_key_b64}</div>
                    </div>
                  </div>

                  {/* Technical Information */}
                  <div className="field-group">
                    <label className="field-label">‚öôÔ∏è Technical Details</label>
                    <div className="field-value">
                      <div className="mb-2"><strong>Entropy:</strong> {wallet.entropy_hex}</div>
                      <div className="mb-2"><strong>Seed:</strong> {wallet.seed_hex.substring(0, 64)}...</div>
                      <div><strong>Master Chain:</strong> {wallet.master_chain_hex}</div>
                    </div>
                  </div>

                  {/* Signature Test */}
                  <div className="field-group">
                    <label className="field-label">‚úÖ Signature Verification</label>
                    <div className="field-value">
                      <div className="mb-2"><strong>Test Message:</strong> {wallet.test_message}</div>
                      <div className="mb-2"><strong>Signature:</strong> {wallet.test_signature}</div>
                      <div>
                        <strong>Status:</strong> 
                        <span className={wallet.signature_valid ? 'status-valid' : 'status-invalid'}>
                          {wallet.signature_valid ? ' VALID ‚úÖ' : ' INVALID ‚ùå'}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* HD Derivation */}
                  <div className="field-group">
                    <label className="field-label">üå≥ HD Wallet Derivation</label>
                    <div className="derivation-controls">
                      <select 
                        className="form-select"
                        value={networkType} 
                        onChange={(e) => setNetworkType(parseInt(e.target.value))}
                      >
                        {networkTypes.map(type => (
                          <option key={type.value} value={type.value}>
                            {type.label}
                          </option>
                        ))}
                      </select>
                      
                      <input 
                        type="number" 
                        className="form-input"
                        placeholder="Index"
                        value={derivationIndex}
                        onChange={(e) => setDerivationIndex(parseInt(e.target.value) || 0)}
                        min="0" 
                        max="100"
                      />
                      
                      <button className="btn btn-secondary" onClick={handleDerivePath}>
                        Derive Address
                      </button>
                    </div>
                    
                    {derivedAddress && (
                      <div className="derived-info">
                        <div className="mb-2"><strong>Derived Address:</strong> {derivedAddress}</div>
                        <div><strong>Derivation Path:</strong> m/{derivedPath}</div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Save Button */}
                <div className="text-center mt-4">
                  <button className="btn btn-primary btn-large" onClick={handleSaveWallet}>
                    <span>üíæ</span>
                    <span>Download Wallet File</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="footer">
        <div className="footer-content">
          <p>&copy; 2024 Octra Labs. Professional wallet generation with enterprise-grade security.</p>
        </div>
      </footer>
    </div>
  );
};

export default WalletGenerator;